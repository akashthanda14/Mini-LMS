// MicroCourses LMS - Prisma Schema
// Learning Management System for micro-learning platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                  String    @id @default(uuid()) @db.Uuid
  name                String?
  username            String?   @unique @db.VarChar(50)
  fullName            String?   @db.VarChar(100)
  email               String?   @unique @db.VarChar(255)
  password            String?
  role                UserRole  @default(LEARNER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  emailVerified       Boolean   @default(false)
  phoneNumber         String?   @unique @db.VarChar(20)
  phoneVerified       Boolean   @default(false)
  isProfileComplete   Boolean   @default(false)
  isActive            Boolean   @default(true)
  resetToken          String?   @db.VarChar(255)
  dob                 DateTime?
  
  // Profile fields
  country             String?   @db.VarChar(100)
  state               String?   @db.VarChar(100)
  zip                 String?   @db.VarChar(20)
  bio                 String?   @db.Text
  avatar              String?   @db.VarChar(500)

  // Email change workflow
  pendingEmail        String?
  pendingEmailOtp     String?
  pendingEmailExpiry  DateTime?
  
  // Phone change workflow
  pendingPhone        String?
  pendingPhoneOtp     String?
  pendingPhoneExpiry  DateTime?
  
  // Password reset
  resetTokenExpiry    DateTime?
  
  // Account deletion
  pendingDeleteOtp    String?
  pendingDeleteExpiry DateTime?
  
  // Last login tracking
  lastLoginAt         DateTime?

  // LMS Relations
  creatorApplication  CreatorApplication?
  coursesCreated      Course[]             @relation("CourseCreator")
  enrollments         Enrollment[]
  certificates        Certificate[]
  reviewedApplications CreatorApplication[] @relation("ApplicationReviewer")
  
  // Auth Relations
  emailOtps           EmailOTP[]
  phoneOtps           PhoneOTP[]

  @@index([email])
  @@index([phoneNumber])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([phoneVerified, isProfileComplete])
  @@index([emailVerified, isProfileComplete])
  @@index([resetToken])
  @@map("users")
}

// ============================================================================
// CREATOR APPLICATION
// ============================================================================

model CreatorApplication {
  id          String                      @id @default(uuid()) @db.Uuid
  userId      String                      @unique @db.Uuid
  bio         String                      @db.Text
  portfolio   String?                     @db.VarChar(500)
  experience  String                      @db.Text
  status      CreatorApplicationStatus    @default(PENDING)
  reviewedBy  String?                     @db.Uuid
  reviewedAt  DateTime?
  rejectionReason String?                 @db.Text
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @updatedAt
  
  // Relations
  user        User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer    User?                       @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])

  @@index([userId])
  @@index([status])
  @@index([reviewedBy])
  @@index([createdAt])
  @@map("creator_applications")
}

// ============================================================================
// COURSES & LESSONS
// ============================================================================

model Course {
  id              String        @id @default(uuid()) @db.Uuid
  creatorId       String        @db.Uuid
  title           String        @db.VarChar(255)
  description     String        @db.Text
  thumbnail       String?       @db.VarChar(500)
  category        String?       @db.VarChar(100)
  level           CourseLevel   @default(BEGINNER)
  duration        Int?
  status          CourseStatus  @default(DRAFT)
  submittedAt     DateTime?
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  creator         User          @relation("CourseCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  lessons         Lesson[]
  enrollments     Enrollment[]
  certificates    Certificate[]

  @@index([creatorId])
  @@index([status])
  @@index([category])
  @@index([level])
  @@index([publishedAt])
  @@index([createdAt])
  @@map("courses")
}

model Lesson {
  id          String            @id @default(uuid()) @db.Uuid
  courseId    String            @db.Uuid
  title       String            @db.VarChar(255)
  videoUrl    String            @db.VarChar(500)
  transcript  String?           @db.Text
  order       Int
  duration    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]

  @@unique([courseId, order], name: "unique_lesson_order")
  @@index([courseId])
  @@index([order])
  @@map("lessons")
}

// ============================================================================
// ENROLLMENT & PROGRESS
// ============================================================================

model Enrollment {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String            @db.Uuid
  courseId    String            @db.Uuid
  progress    Int               @default(0)
  enrolledAt  DateTime          @default(now())
  completedAt DateTime?
  lastAccessedAt DateTime?
  
  // Relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
  certificate Certificate?

  @@unique([userId, courseId], name: "unique_user_course_enrollment")
  @@index([userId])
  @@index([courseId])
  @@index([enrolledAt])
  @@index([completedAt])
  @@map("enrollments")
}

model LessonProgress {
  id            String      @id @default(uuid()) @db.Uuid
  enrollmentId  String      @db.Uuid
  lessonId      String      @db.Uuid
  completed     Boolean     @default(false)
  watchedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  enrollment    Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson        Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId], name: "unique_enrollment_lesson_progress")
  @@index([enrollmentId])
  @@index([lessonId])
  @@index([completed])
  @@map("lesson_progress")
}

// ============================================================================
// CERTIFICATES
// ============================================================================

model Certificate {
  id            String      @id @default(uuid()) @db.Uuid
  enrollmentId  String      @unique @db.Uuid
  userId        String      @db.Uuid
  courseId      String      @db.Uuid
  serialHash    String      @unique @db.VarChar(64)
  issuedAt      DateTime    @default(now())
  
  // Relations
  enrollment    Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([serialHash])
  @@index([issuedAt])
  @@map("certificates")
}

// ============================================================================
// AUTHENTICATION (OTP)
// ============================================================================

model PhoneOTP {
  id          Int      @id @default(autoincrement())
  otp         String   @db.VarChar(6)
  userId      String   @db.Uuid
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  attempts    Int      @default(0)
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  type        OTPType  @default(SIGNIN)
  userAgent   String?
  maxAttempts Int      @default(3)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("phone_otps")
}

model EmailOTP {
  id          Int      @id @default(autoincrement())
  userId      String   @db.Uuid
  otp         String   @db.VarChar(6)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  maxAttempts Int      @default(3)
  type        OTPType  @default(EMAIL_VERIFICATION)
  userAgent   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("email_otps")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  LEARNER
  CREATOR
  ADMIN
}

enum CreatorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CourseStatus {
  DRAFT
  SUBMITTED
  PUBLISHED
  ARCHIVED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum OTPType {
  SIGNIN
  SIGNUP
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  EMAIL_CHANGE
  PHONE_CHANGE
  ACCOUNT_DELETE
}
